# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import os
import json
from shutil import copyfile
import re
import fileinput
import shutil

filename = os.path.join(os.path.dirname(__file__), 'Internet\Internet.json')
data = json.load(open(filename))

def replaceInFile(fName,config):
    key = ''
    text = ''
    value = ''
    for line in fileinput.FileInput(fName, inplace=True):
        try:
            key = line.split('@')[1].replace('\n','')
            keys = re.split('\.',key.split(' ',1)[0])
            value = config
            text = '@'
            for k in keys:
                try:
                    value = value[k]
                except:
#                     print(k)
                    if 'include.' in text:
                        incFile = os.path.join(os.path.dirname(__file__), k)
                        incCopyFile = os.path.join(os.path.dirname(__file__), 'Tests\Internet\\cpy')
                        copyfile(incFile, incCopyFile)
                        replaceInFile(incCopyFile,config)
                        with open(incCopyFile, 'r') as ins:
                            for l in ins:
                                print('\t' * line.count('\t')+l.replace('\n',''))
                        ins.close()
                        os.remove(incCopyFile)
                    value = ''
                    print('\t' * line.count('\t')+'//'+text+k)  
                text = text+k+'.'
            text = text[:-1]
            print(line.replace(text, value,100).replace(' `','',100), end='')
        except:
            print(line.replace(text, value), end='')
 
       
for railway in data['railways']:
    for path in railway['pathways']:
        try:
            os.remove( os.path.join(os.path.dirname(__file__), 'Tests\Internet\\'+path['template']['dest']))
        except:
            continue
        
    for path in railway['pathways']:
        dstFile = os.path.join(os.path.dirname(__file__), 'Tests\Internet\\'+path['template']['dest'])
        if not os.path.exists(dstFile):
            srcFile = os.path.join(os.path.dirname(__file__), path['template']['source'])
            copyfile(srcFile, dstFile)
            print('generate file from template ',dstFile)
        replaceInFile(dstFile,path)
       
    print('----')
    for train in railway['trains']:
        try:
            os.remove( os.path.join(os.path.dirname(__file__), 'Tests\Internet\\'+train['template']['dest']))
        except:
            continue
        
    for train in railway['trains']:
        dstFile = os.path.join(os.path.dirname(__file__), 'Tests\Internet\\'+train['template']['dest'])
        if not os.path.exists(dstFile):
            srcFile = os.path.join(os.path.dirname(__file__), train['template']['source'])
            copyfile(srcFile, dstFile)
            print('generate file from template ',dstFile)
        replaceInFile(dstFile,train)   
    
    print('----')
    try:
        os.remove( os.path.join(os.path.dirname(__file__), 'Tests\Internet\\'+railway['test']['template']['dest']))
    except:
        print('v')
    dstFile = os.path.join(os.path.dirname(__file__), 'Tests\Internet\\'+railway['test']['template']['dest'])
    if not os.path.exists(dstFile):
        srcFile = os.path.join(os.path.dirname(__file__), railway['test']['template']['source'])
        copyfile(srcFile, dstFile)
        print('generate file from template ',dstFile)
    replaceInFile(dstFile,railway['test'])  
        
for path in data['migrate']['path']:
    if not os.path.exists(path['dest']):
        os.makedirs(path['dest'])
    src = []
    try:
        src = os.listdir(path['source'])
    except:
        continue
    for file in src:
        file = os.path.join(path['source'],file)
        print(file)
        if (os.path.isfile(file)):
            shutil.copy(file, path['dest'])
        
